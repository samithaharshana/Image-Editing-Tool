/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package photopaint;

import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;

/**
 *
 * @author Samitha
 */
public class ImageTool extends javax.swing.JFrame {

    /**
     * Creates new form ImageViwer
     */
    
       //*********************declare varivbles here******************************* 
    //array list to contain opened images 
     public static ArrayList<ImageViewer> openedarray = new ArrayList<>();
     //create a new filechooser object defult location set to desktop
       private JFileChooser open = new JFileChooser("C:\\Users\\Samitha\\Desktop\\");
       //buffered image to hold the opened image
         private static  BufferedImage thisImage;
       private static  BufferedImage thisImage1;
         //set the current to  thisImage (initialize thisImage when open an image)
       public static void setCurrentImage(BufferedImage current){
        ImageTool.thisImage = current; // thisImage = Opened Image
    }
    
       
         public static void setCurrentImage1(BufferedImage current){
        ImageTool.thisImage1 = current; // thisImage = Opened Image
    }
    // default constructor
    public ImageTool() {
        initComponents();
         this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        //display the file chooser dialog box
       open.setDialogTitle("PhotoPaint Open Images");
       
       // open.setMultiSelectionEnabled(false);
        
//        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
//        this.setSize(screenSize.width, this.getHeight());
    }

    //creating SetChanel object
   SetChanel chanel= new SetChanel();
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        OpenImage = new javax.swing.JMenuItem();
        SaveImage = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        RGBChanel = new javax.swing.JMenuItem();
        Histogram = new javax.swing.JMenuItem();
        Clone = new javax.swing.JMenuItem();
        Brightness = new javax.swing.JMenuItem();
        Negative = new javax.swing.JMenuItem();
        Normalize = new javax.swing.JMenuItem();
        Resample = new javax.swing.JMenuItem();
        RGB = new javax.swing.JMenu();
        redchanel = new javax.swing.JMenuItem();
        greenchanel = new javax.swing.JMenuItem();
        bluechanel = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Photo Paint");
        setPreferredSize(new java.awt.Dimension(300, 100));
        setResizable(false);

        jMenu1.setText("File");

        OpenImage.setText("Open");
        OpenImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenImageActionPerformed(evt);
            }
        });
        jMenu1.add(OpenImage);

        SaveImage.setText("Save");
        SaveImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveImageActionPerformed(evt);
            }
        });
        jMenu1.add(SaveImage);

        Exit.setText("Exit");
        jMenu1.add(Exit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Tool");

        RGBChanel.setText("RGB Division");
        RGBChanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RGBChanelActionPerformed(evt);
            }
        });
        jMenu2.add(RGBChanel);

        Histogram.setText("Show Histogram");
        jMenu2.add(Histogram);

        Clone.setText("Clone");
        jMenu2.add(Clone);

        Brightness.setText("Brightness/Contrast");
        jMenu2.add(Brightness);

        Negative.setText("Negative");
        jMenu2.add(Negative);

        Normalize.setText("Normalize/ Contrast Stretching");
        jMenu2.add(Normalize);

        Resample.setText("Resampling/Zooming");
        jMenu2.add(Resample);

        RGB.setText("RGB");

        redchanel.setText("RED");
        redchanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redchanelActionPerformed(evt);
            }
        });
        RGB.add(redchanel);

        greenchanel.setText("GREEN");
        greenchanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenchanelActionPerformed(evt);
            }
        });
        RGB.add(greenchanel);

        bluechanel.setText("BLUE");
        bluechanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bluechanelActionPerformed(evt);
            }
        });
        RGB.add(bluechanel);

        jMenu2.add(RGB);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 757, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 469, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OpenImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenImageActionPerformed
        // TODO add your handling code here:
        
        //open the choosing dialogbox to choose a image
        int val1 = open.showOpenDialog(this);
        
         if(val1 == JFileChooser.APPROVE_OPTION)
        {
            //open the selected file
            File file = open.getSelectedFile();
                      
            //create a new jframe ImageViwer         

            ImageViewer newImage = new ImageViewer(file);
            //get the original file name and display title as jframe
            newImage.setImageName(file.getName());
            //adding the opened image to the array list
            openedarray.add(newImage); // send the object to array list
            
            //Tne selected image is shown 
            newImage.setVisible(true);
           
            
        }else{
           
        }
        
        
    }//GEN-LAST:event_OpenImageActionPerformed

    private void SaveImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveImageActionPerformed
        // TODO add your handling code here:
        //choose a sav elocation
         JFileChooser save = new JFileChooser();
          try {
              //get the Bufferd imaged from the array list
            ImageViewer img = openedarray.get(0);
                
            BufferedImage image = img.getImage();
            //show the choose box and get the location
            int returnVal = save.showSaveDialog(this);
            
            if(returnVal==JFileChooser.APPROVE_OPTION)
            {
                File file = save.getSelectedFile();//get the selected file to file
                ImageIO.write(image, "jpg", file);// saving
            }
        } catch (HeadlessException | IOException e) {
           
        }
        
    }//GEN-LAST:event_SaveImageActionPerformed

  
    
    private void RGBChanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RGBChanelActionPerformed
        // TODO add your handling code here:
        
        BufferedImage rgb= thisImage;
        
        //getting the red channel from original image
       RGB red = new RGB(chanel.getRedChannel(rgb),  "red channel");
        red.setSize(rgb.getWidth(), rgb.getHeight());
        red.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        red.setVisible(true);
        
        //getting the green channel from original image
        RGB green = new RGB(chanel.getGreenChannel(rgb),  "green channel");
        green.setSize(rgb.getWidth()+50, rgb.getHeight()+50);
        green.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        green.setVisible(true);
        
        //getting the blue channel from original
       RGB blue = new RGB(chanel.getBlueChannel(rgb),  "blue channel");
        blue.setSize(rgb.getWidth()+50, rgb.getHeight()+50);
        blue.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        blue.setVisible(true);
    }//GEN-LAST:event_RGBChanelActionPerformed

    private void redchanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redchanelActionPerformed
        // TODO add your handling code here:
       final BufferedImage rgb= thisImage;
        
        //getting the red channel from original image
       RGB red = new RGB(chanel.getRedChannel(rgb),  "red channel");
        red.setSize(rgb.getWidth(), rgb.getHeight());
        red.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        red.setVisible(true);
        
    }//GEN-LAST:event_redchanelActionPerformed

    private void greenchanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_greenchanelActionPerformed
        // TODO add your handling code here:
       final  BufferedImage rgb= thisImage;
           //getting the green channel from original image
         RGB green = new RGB(chanel.getGreenChannel(rgb),  "green channel");
        green.setSize(rgb.getWidth()+50, rgb.getHeight()+50);
        green.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        green.setVisible(true);
    }//GEN-LAST:event_greenchanelActionPerformed

    private void bluechanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bluechanelActionPerformed
        // TODO add your handling   code here:
       final  BufferedImage rgb= thisImage;
          //getting the blue channel from original
        RGB blue = new RGB(chanel.getGreenChannel(rgb),  "blue channel");
        blue.setSize(rgb.getWidth()+50, rgb.getHeight()+50);
        blue.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        blue.setVisible(true);
    }//GEN-LAST:event_bluechanelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImageTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImageTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImageTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImageTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ImageTool().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Brightness;
    private javax.swing.JMenuItem Clone;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenuItem Histogram;
    private javax.swing.JMenuItem Negative;
    private javax.swing.JMenuItem Normalize;
    private javax.swing.JMenuItem OpenImage;
    private javax.swing.JMenu RGB;
    private javax.swing.JMenuItem RGBChanel;
    private javax.swing.JMenuItem Resample;
    private javax.swing.JMenuItem SaveImage;
    private javax.swing.JMenuItem bluechanel;
    private javax.swing.JMenuItem greenchanel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem redchanel;
    // End of variables declaration//GEN-END:variables
}
